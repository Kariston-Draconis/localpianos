<input type="text" id="search_string" placeholder="search locations">

<button type="button" id="search_btn">GO</button>

<div id="googleMap"></div>

<div id="infowindow-content">
  <img src="" width="16" height="16" id="place-icon">
  <span id="place-name" class="title"></span><br>
  <span id="place-address"></span>
</div>

<script type="text/javascript">

  var locationSearch = function () {
    var settings = {
      url: '/api_search_test',
      data: {
        searchString: $('#search_string').val()
      }
    }
    $.ajax(settings).done(function (result) {
      console.log(result);
    })
  }
  $('#search_btn').click(locationSearch)

  var searchCoordinates = function (latitude, longitude) {
  var settings = {
    url: '/api_search_coordinates',
    data: {
      latitude: place.geometry.location.lat(),
      longitude: place.geometry.location.lng()
    }
  }
    $.ajax(settings).done(function (result) {

      piano_locations = result.result;
      console.log(piano_locations);
      piano_locations.forEach(function (piano) {
        var marker = new google.maps.Marker({
          position: {
            lat: piano.latitude,
            lng: piano.longitude
          },
          map: map
        });
      });
    });
  }

  function myMap() {
    var piano_locations
    var mapProp = {
      // add dynamic ip-fed location here
      center: new google.maps.LatLng(-37.8136, 144.9631),
      zoom: 13
    };
    
    var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
    var input = document.getElementById('search_string');

    var autocomplete = new google.maps.places.Autocomplete(input);

    // Bind the map's bounds (viewport) property to the autocomplete object, so that the autocomplete requests use the current map bounds for the bounds option in the request.
    autocomplete.bindTo('bounds', map);

    var infowindow = new google.maps.InfoWindow();
    var infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);
    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    autocomplete.addListener('place_changed', function () {
      infowindow.close();
      marker.setVisible(false);
      var place = autocomplete.getPlace();
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and pressed the Enter key, or the Place Details request failed.
        //
        // ADD A NICER ERROR BEHAVIOUR HERE:
        //
        // window.alert("No details available for input: '" + place.name + "'");
        return;
      }

      // If the place has a geometry, then present it on a map.
      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(17); // Why 17? Because it looks good.
      }

      marker.setPosition(place.geometry.location);
      marker.setVisible(false);



      searchCoordinates(place.geometry.location.lat(), place.geometry.location.lng())

      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      }

      // infowindowContent.children['place-icon'].src = place.icon; infowindowContent.children['place-name'].textContent = place.name; infowindowContent.children['place-address'].textContent = address; infowindow.open(map, marker);
    });

  }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyASps5hTZ-16jFKeoywD5bycvwAt0VQp9c&libraries=places&callback=myMap"></script>
